precision mediump float;       // Устанавливаем по умолчания среднюю точность.
                               // Высокая точность нам не нужна.
uniform vec3 u_LightPos;       // Положение источника света в видимом простнастве.

varying vec3 v_Position;       // Интерполированное положение для фрагмента.
varying vec4 v_Color;          // Цвет вершинного шейдера интерполированный
                               // через треугольник.
varying vec3 v_Normal;         // Интерполированные нормали шейдера.

// Начало программы франгментного шейдера.
void main()
{
    // Расстояние для расчета ослабления света.
    float distance = length(u_LightPos - v_Position);

    // Получаем вектор направления от источника света к вершинам.
    vec3 lightVector = normalize(u_LightPos - v_Position);

    // Рассчитываем скалярное произведение вектора света и вектора нормали.
    // Если они совпадают в направлении мы получаем максимум освещения.
    float diffuse = max(dot(v_Normal, lightVector), 0.1);

    // Добавляем коэффициент затухание.
    diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));

    // Перемножаем цвет и коэффициент затухания для получения результирующего цвета.
    gl_FragColor = v_Color * diffuse;
}